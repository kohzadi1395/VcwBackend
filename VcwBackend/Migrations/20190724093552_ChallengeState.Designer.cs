// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace VcwBackend.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20190724093552_ChallengeState")]
    partial class ChallengeState
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CategoryId");

                    b.Property<Guid?>("ChallengeId");

                    b.Property<int>("ChallengeState");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("FileName");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ChallengeId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.Property<int>("ChallengeState");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Entities.Challenge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChallengeState");

                    b.Property<string>("ChallengeType");

                    b.Property<string>("CompanyName");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime?>("Deadline");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<decimal>("FirstBounce")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<decimal>("SecondBounce")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ThirdBounce")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime>("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Entities.Filter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<Guid>("InviteId");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("InviteId");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("Domain.Entities.FilterIdeaPassed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("Deleted");

                    b.Property<Guid?>("FilterStatusId");

                    b.Property<Guid?>("IdeaStatusId");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<bool>("Passed");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FilterStatusId");

                    b.HasIndex("IdeaStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("FilterIdeaPasseds");
                });

            modelBuilder.Entity("Domain.Entities.FilterStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<Guid?>("FilterId");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<int>("Rank");

                    b.Property<Guid?>("StatusId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FilterId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("FilterStatuses");
                });

            modelBuilder.Entity("Domain.Entities.Idea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<Guid?>("InviteId");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("InviteId");

                    b.ToTable("Ideas");
                });

            modelBuilder.Entity("Domain.Entities.IdeaStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<Guid>("IdeaId");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<Guid>("StatusId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("IdeaId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("IdeaStatuses");
                });

            modelBuilder.Entity("Domain.Entities.Invite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ChallengeId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("Deleted");

                    b.Property<bool?>("IsMaster");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("Domain.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Company");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<string>("Password");

                    b.Property<byte[]>("ProfileImage");

                    b.Property<string>("Title");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Attachments")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Domain.Entities.Challenge", "Challenge")
                        .WithMany("Attachments")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Domain.Entities.Filter", b =>
                {
                    b.HasOne("Domain.Entities.Invite", "Invite")
                        .WithMany("Filters")
                        .HasForeignKey("InviteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.FilterIdeaPassed", b =>
                {
                    b.HasOne("Domain.Entities.FilterStatus", "FilterStatus")
                        .WithMany("FilterIdeaPasseds")
                        .HasForeignKey("FilterStatusId");

                    b.HasOne("Domain.Entities.IdeaStatus", "IdeaStatus")
                        .WithMany("FilterIdeaPasseds")
                        .HasForeignKey("IdeaStatusId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("FilterIdeaPasseds")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.FilterStatus", b =>
                {
                    b.HasOne("Domain.Entities.Filter", "Filter")
                        .WithMany("FilterStatus")
                        .HasForeignKey("FilterId");

                    b.HasOne("Domain.Entities.Status", "Status")
                        .WithMany("FilterStatus")
                        .HasForeignKey("StatusId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("FilterStatuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Idea", b =>
                {
                    b.HasOne("Domain.Entities.Invite", "Invite")
                        .WithMany("Ideas")
                        .HasForeignKey("InviteId");
                });

            modelBuilder.Entity("Domain.Entities.IdeaStatus", b =>
                {
                    b.HasOne("Domain.Entities.Idea", "Idea")
                        .WithMany("IdeaStatus")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Status", "Status")
                        .WithMany("IdeaStatus")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("IdeaStatuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Invite", b =>
                {
                    b.HasOne("Domain.Entities.Challenge", "Challenge")
                        .WithMany("Invites")
                        .HasForeignKey("ChallengeId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Invites")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
